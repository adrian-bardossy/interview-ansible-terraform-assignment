# Terraform + Ansible Infrastructure Automation Assignment

## Architecture Topology
![Inftrastructure Topology](Topology.png)

## Overview
This project demonstrates a **fully automated AWS infrastructure** deployed with **Terraform**, configured via **Ansible**, and orchestrated by **GitHub Actions**.

It builds a complete environment consisting of:
- an Ansible public instance
- three private NGINX servers without access to the internet, placed behind the ALB
- an Application Load Balancer (ALB)  
- secure VPC, state management, and automation pipeline
- Key Pair Generated by Terraform to Access all those EC2 instances

## Modules Structure
- `VPC` - Creates VPC, public + private subnets (no NAT) 
- `Security_Group`- SSH, ALB and NGINX security rules 
- `KP` - Creates key pair `ubuntu_KP.pem`
- EC2-instance` - Deploys Ansible bastion and 3 NGINX instances
- `ALB` - Creates Application Load Balancer + Target Group |
- Backend - S3 + DynamoDB for state and lock 

## GitHub Actions Pipeline
- Located at: `.github/workflows/deploy_infrastructure.yml`

### Trigger of the pipeline
- On pull request → `terraform plan` will display what will be deployed
- On push to `main` → terraform apply + Ansible actions

### Steps Summary
- Checkout repository 
- Configure AWS credentials 
- Installs Ansible on github runner
- Terraform Init / Validate / Plan / Apply
- Copy SSH key to  Ansible instance (`/home/ubuntu/`) 
- Upload git ansible config `ansible/` directory to Ansible instance 
- Generate `inventory.ini` from Terraform outputs and copy it to Ansible instance
- Run Ansible playbook on the ansible instance

## Ansible Configuration
### Playbook Summary
- File: `ansible/playbook.yml`
Contaning:
- hosts: nginx (group of instances)
  become: yes
  roles:
    - nginx
    - ssl

### Role Nginx 
- Role nginx installs and configures web servers
- Installs NGINX
- Creates /phrase endpoint
- Enables HTTP (80) and HTTPS (443)
- Ensures service starts on boot

### Role SSL
- Generates self-signed SSL certificate
- Restarts nginx service to apply the self-signed SSL certificate

### Dynamic invenotry.ini
- pre-configured inventory.ini contains 3 IP addresses
- pipeline job Generate and replace inventory.ini in the downloaded ansible folder on the ansible instance will replace them in place and store them on ansible instance
- [nginx]
    10.0.1.35
    10.0.1.199
    10.0.1.207

## Requirements

| Name | Version |
|------|---------|
| <a name="requirement_aws"></a> [aws](#requirement\_aws) | ~> 5.0 |

## Providers

No providers.

## Modules

| Name | Source | Version |
|------|--------|---------|
| <a name="module_ALB"></a> [ALB](#module\_ALB) | ./modules/ALB | n/a |
| <a name="module_EC2-instance"></a> [EC2-instance](#module\_EC2-instance) | ./modules/EC2-instance | n/a |
| <a name="module_KP"></a> [KP](#module\_KP) | ./modules/KP | n/a |
| <a name="module_Security_Group"></a> [Security\_Group](#module\_Security\_Group) | ./modules/Security_Group | n/a |
| <a name="module_VPC"></a> [VPC](#module\_VPC) | ./modules/VPC | n/a |

## Resources

No resources.

## Inputs

| Name | Description | Type | Default | Required |
|------|-------------|------|---------|:--------:|
| <a name="input_aws_region"></a> [aws\_region](#input\_aws\_region) | AWS region to deploy the resources into | `string` | n/a | yes |
| <a name="input_instance_key_name"></a> [instance\_key\_name](#input\_instance\_key\_name) | Name of the instance key pair | `string` | n/a | yes |
| <a name="input_instance_name"></a> [instance\_name](#input\_instance\_name) | Name of the AWS instance | `string` | n/a | yes |
| <a name="input_public_ip"></a> [public\_ip](#input\_public\_ip) | Your public IP to be able to access the EC2 instance | `string` | n/a | yes |
| <a name="input_vpc_name"></a> [vpc\_name](#input\_vpc\_name) | VPC | `string` | n/a | yes |

## Outputs

| Name | Description |
|------|-------------|
| <a name="output_ALB_SG_id"></a> [ALB\_SG\_id](#output\_ALB\_SG\_id) | n/a |
| <a name="output_Alb_SG_name"></a> [Alb\_SG\_name](#output\_Alb\_SG\_name) | ALB HTTPS SG outputs |
| <a name="output_Nginx_SG_id"></a> [Nginx\_SG\_id](#output\_Nginx\_SG\_id) | n/a |
| <a name="output_Nginx_SG_name"></a> [Nginx\_SG\_name](#output\_Nginx\_SG\_name) | n/a |
| <a name="output_SSH_SG_id"></a> [SSH\_SG\_id](#output\_SSH\_SG\_id) | n/a |
| <a name="output_SSH_SG_name"></a> [SSH\_SG\_name](#output\_SSH\_SG\_name) | Security groups |
| <a name="output_alb_dns_name"></a> [alb\_dns\_name](#output\_alb\_dns\_name) | ALB outputs |
| <a name="output_ansible_instance_public_ip"></a> [ansible\_instance\_public\_ip](#output\_ansible\_instance\_public\_ip) | n/a |
| <a name="output_nginx_private_ips"></a> [nginx\_private\_ips](#output\_nginx\_private\_ips) | n/a |
| <a name="output_private_key_name"></a> [private\_key\_name](#output\_private\_key\_name) | KP outputs |
